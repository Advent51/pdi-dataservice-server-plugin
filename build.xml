<project name="PUR Repository Plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- Import the subfloor-pkg.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />
  <property name="bi-platform-ee-assembly.dir" value="../bi-platform-ee-assembly"/>
  <property name="bi-platform-ee.obflib.dir" value="${bi-platform-ee-assembly.dir}/bin/stage/biserver-ee/tomcat/webapps/pentaho/WEB-INF/lib"/>
  <target name="install">
    <unzip src="${dist.dir}/${package.basename}.zip" dest="${kettle.plugin.dir}" overwrite="true">
    </unzip>
  </target>

  <!-- 
  subfloor overrides 
  -->
  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <!--
    <fileset dir="../Kettle/lib">
      <include name="*.jar" />
    </fileset>
    -->
  </path>

  <!-- Override to put mock license JAR first -->
  <path id="test.classpath">
    <fileset dir="${devlib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${testlib.dir}">
      <include name="*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
    <dirset dir="${classes.dir}" />
    <dirset dir="${testclasses.dir}" />
  </path>

  <!-- Override assemble to build plugin.xml afterwards -->
  <target name="assemble" depends="subfloor-pkg.assemble, update-plugin-xml" />

  <target name="update-plugin-xml">
    <replace file="${approot.stage.dir}/plugin.xml">
      <replacefilter token="@project.revision@" value="${project.revision}" />
      <replacefilter token="@dependency.bi-platform.revision@" value="${dependency.bi-platform.revision}" />
      <replacefilter token="@dependency.pentaho-ee-dsc.revision@" value="${dependency.pentaho-ee-dsc.revision}" />
    </replace>
  </target>

  <!-- Copy all jars over to the plugin zip, 
  except for kettle, licensing jars, metro, xul, log4j, and pur (server-side) -->
  <target name="assemble.copy-libs" depends="install-antcontrib">

    <copy todir="${approot.stage.dir}/lib">
      <fileset dir="${lib.dir}">
        <exclude name="kettle-*.jar" />
        <exclude name="pentaho-xul-*.jar" />
        <exclude name="metro-*.jar" />
        <exclude name="log4j-*.jar" />
        <exclude name="pentaho-ee-dsc-core-${dependency.pentaho-ee-dsc.revision}.jar" />
        <exclude name="pentaho-bi-platform-ee-${dependency.bi-platform.revision}.jar" />
      </fileset>
    </copy>

    <if>
      <available file="${bi-platform-ee.obflib.dir}/pentaho-ee-dsc-core-${dependency.pentaho-ee-dsc.revision}-obf.jar" />
      <then>
        <!-- copy the required obfuscated jars to the plugin dist lib folder -->
      	<!-- We don't trust ProGuard to generate the same obfuscated classes for the dsc jar, so we overwrite it here -->
        <!-- obf suffix removed since plugin.xml contains references to non-suffixed filenames -->
      	<copy file="${bi-platform-ee.obflib.dir}/pentaho-ee-dsc-core-${dependency.pentaho-ee-dsc.revision}-obf.jar"
      	      tofile="${approot.stage.dir}/lib/pentaho-ee-dsc-core-${dependency.pentaho-ee-dsc.revision}.jar" overwrite="true"/>
      	<copy file="${bi-platform-ee.obflib.dir}/pentaho-bi-platform-ee-${dependency.bi-platform.revision}-obf.jar"
      	      tofile="${approot.stage.dir}/lib/pentaho-bi-platform-ee-${dependency.bi-platform.revision}.jar" overwrite="true"/>
        <copy file="${dist.dir}/${ivy.artifact.id}-${project.revision}-obf.jar"
        	  tofile="${approot.stage.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
      </then>
      <else>
        <!-- copy the required jars to the plugin dist lib folder -->
      	<!-- if release=true, we've got a problem, we should blow up here -->
        <copy todir="${approot.stage.dir}/lib" overwrite="true">
          <fileset dir="${lib.dir}">
            <include name="pentaho-ee-dsc-core-${dependency.pentaho-ee-dsc.revision}.jar" />
          	<include name="pentaho-bi-platform-ee-${dependency.bi-platform.revision}.jar" />
          </fileset>
        </copy>
        <copy file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"
        	  tofile="${approot.stage.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
      </else>
    </if>
  </target>

  <!-- Release process calls this target. -->

  <!-- 
	
	-->
  <target name="obfuscate">

  	<!-- this project requires the platform ee assembly proguard file being present -->
  	<copy todir="${dist.dir}" file="${bi-platform-ee-assembly.dir}/dist/proguard-biserver-ee-${dependency.bi-platform.revision}.map"/>

    <taskdef resource="proguard/ant/task.properties" classpath="obf-lib/proguard-4.3.jar" />
    <proguard>
      <![CDATA[
      -useuniqueclassmembernames
      -dontoptimize
      -dontshrink
      -dontnote
      -printmapping ${dist.dir}/proguard-${ivy.artifact.id}-${project.revision}.map
      -applymapping ${dist.dir}/proguard-biserver-ee-${dependency.bi-platform.revision}.map 
      -renamesourcefileattribute SourceFile
      -keepattributes SourceFile,LineNumberTable
      -keepattributes *Annotation*
      -keepattributes Signature
      -keepattributes EnclosingMethod
      -printseeds

      -libraryjars ${java.home}/lib/rt.jar
      -libraryjars ${java.home}/lib/jsse.jar
      -libraryjars ${java.home}/lib/jce.jar
      -libraryjars ${lib.dir}
      -libraryjars ${devlib.dir}
      
      -injars      ${dist.dir}/${ivy.artifact.id}-${project.revision}.jar
      -outjars     ${dist.dir}/${ivy.artifact.id}-${project.revision}-obf.jar
 
    -keepclassmembers enum * {
      public static **[] values();
      public static ** valueOf(java.lang.String);
    }
      
	  -keepclasseswithmembernames class * implements org.pentaho.di.repository.Repository {
		  public protected *;
	  }
  	  -keepclasseswithmembernames class * implements org.pentaho.di.repository.RepositorySecurityProvider {
  		  public protected *;
  	  }
	  -keepclasseswithmembernames class * implements ObjectRevision {
		  public protected *;
	  }
	  -keepclasseswithmembernames class * implements org.pentaho.di.repository.RepositoryMeta {
		  public protected *;
	  }
	  -keepclasseswithmembernames class * implements org.pentaho.di.repository.RepositorySecurityProvider {
		  public protected *;
	  }
  	  -keepclasseswithmembernames class * implements org.pentaho.di.repository.RepositorySecurityProvider {
  		  public protected *;
  	  }
  	  -keepclasseswithmembernames class * implements  org.pentaho.di.repository.RepositoryVersionRegistry {
  		  public protected *;
  	  }
      -keepclasseswithmembernames class * implements org.pentaho.ui.xul.impl.AbstractXulEventHandler {
      	public protected *;	
      }
      
      -keep class * implements org.pentaho.ui.xul.XulEventSourceAdapter {
          void set*(***);
          void set*(int, ***);

          boolean is*(); 
          boolean is*(int);

          *** get*();
          *** get*(int);
      }
      
  	  -keep class org.pentaho.di.ui.repository.pur.PurRepositoryDialog {
    		  public protected *;
      }

      -keep class org.pentaho.di.ui.repository.repositoryexplorer.abs.AbsSpoonPlugin {}
	  -keep class org.pentaho.di.ui.repository.repositoryexplorer.abs.controller.* {
  		  public protected *;
      }
      -keepnames class org.pentaho.di.repository.pur.PurRepositoryLocation
    	
      -keepattributes Exceptions, InnerClasses, *Annotation*
    
      ]]>
    </proguard>
  </target>


  <!-- 
  The following overrides are in place to suppress IVY dependency management.  If you
  want to turn IVY off, you can uncomment these overrides. 
  -->

  <!-- Set default target to skip the ivy "resolve" step -->
  <!--target name="default" depends="clean-all,dist,package" /-->

  <!-- Set the clean-all target to skip the "clean-jars" step.  We do not want our build
  process to delete the "lib" dir -->
  <!--target name="clean-all" depends="clean"/-->

</project>
