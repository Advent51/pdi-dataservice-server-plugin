<project name="PUR Repository Plugin" basedir="." default="default" xmlns:ivy="antlib:org.apache.ivy.ant">
<!--===========================================================================
PENTAHO CORPORATION PROPRIETARY AND CONFIDENTIAL

Copyright 2002 - 2014 Pentaho Corporation (Pentaho). All rights reserved.

NOTICE: All information including source code contained herein is, and
remains the sole property of Pentaho and its licensors. The intellectual
and technical concepts contained herein are proprietary and confidential
to, and are trade secrets of Pentaho and may be covered by U.S. and foreign
patents, or patents in process, and are protected by trade secret and
copyright laws. The receipt or possession of this source code and/or related
information does not convey or imply any rights to reproduce, disclose or
distribute its contents, or to manufacture, use, or sell anything that it
may describe, in whole or in part. Any reproduction, modification, distribution,
or public display of this information without the express written authorization
from Pentaho is strictly prohibited and in violation of applicable laws and
international treaties. Access to the source code contained herein is strictly
prohibited to anyone except those individuals and entities who have executed
confidentiality and non-disclosure agreements or other agreements with Pentaho,
explicitly covering such access.
============================================================================-->
  <property name="approot.stage.lib.dir" value="lib" />
  <property name="assemble.copy-libs.excludes" value="kettle-*.jar, metro-*.jar, pentaho-xul-*.jar, log4j-*.jar, jface*.jar, groovy*.jar"/>
  <property name="assemble.copy-libs.excludes.obf" value="kettle-*.jar, metro-*.jar, pentaho-xul-*.jar, log4j-*.jar, pentaho-ee-dsc-core-*.jar, pentaho-bi-platform-ee-*.jar, jface*.jar, groovy*.jar"/>

  <property name="subfloor-ee.parent.file" value="subfloor-pkg.xml" />

  <import file="build-res/subfloor-ee.xml" />
  <!-- Import the subfloor-pkg.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" />
  <property name="bi-platform-ee-assembly.dir" value="../bi-platform-ee-assembly"/>
  <property name="bi-platform-ee.obflib.dir" value="${bi-platform-ee-assembly.dir}/bin/stage/biserver-ee/tomcat/webapps/pentaho/WEB-INF/lib"/>
  <target name="install">
    <unzip src="${dist.dir}/${package.basename}.zip" dest="${kettle.plugin.dir}" overwrite="true">
    </unzip>
  </target>
  <property name="compilelib.dir"
            value="${basedir}/compile-lib"
            description="Directory for compilation dependencies that shouldn't make it into the distribution" />

  <property name="assemble.stage.dir"
            value="${bin.dir}/stage"
            description="Staging directory for package contents" />

  <!-- Setup the compile classpath -->
  <path id="classpath">
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${compilelib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
  </path>

  <path id="test.classpath">
    <pathelement path="${testclasses.dir}" />
    <fileset dir="${lib.dir}">
      <include name="**/pentaho-platform-repository*.jar" />
    </fileset>
    <fileset dir="${testlib.dir}">
      <include name="**/pentaho-platform-repository*.jar" />
    </fileset>
    <fileset dir="${testlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${devlib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${compilelib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <fileset dir="${lib.dir}">
      <include name="**/*.jar" />
    </fileset>
    <pathelement path="${classes.dir}" />
  </path>

  <target name="clean-jars" depends="subfloor.clean-jars">
    <delete dir="${compilelib.dir}" />
  </target>

  <target name="create-dot-classpath" depends="install-pentaho-ant-tasks,init">
    <dot-classpath>
      <!-- Include all lib dirs -->
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${devlib.dir}">
          <include name="*.jar" />
        </fileset>
        <fileset dir="${compilelib.dir}">
          <include name="**/*.jar" />
        </fileset>
        <fileset dir="${testlib.dir}">
          <include name="*.jar" />
        </fileset>
      </classpath>
    </dot-classpath>
  </target>

  <target name="resolve" depends="subfloor.resolve, resolve-compiletime" />

  <target name="resolve-compiletime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="compile" />
    <ivy:retrieve conf="compile" pattern="${compilelib.dir}/[module]-[revision](-[classifier]).[ext]" symlink="${ivy.use.symlinks.internal}" />
  </target>

  <!-- Override assemble to build plugin.xml afterwards -->
  <target name="assemble" depends="update-plugin-xml">
    <mkdir dir="${assemble.stage.dir}" />
    <mkdir dir="${assemble.stage.dir}/${ivy.artifact.id}" />
    <mkdir dir="${assemble.stage.dir}/${ivy.artifact.id}/lib" />

    <!-- move the plugin jar to the plugin lib folder -->
    <if>
      <available file="${assemble.stage.dir}/${ivy.artifact.id}/${ivy.artifact.id}-${project.revision}-obf.jar" />
      <then>
        <!-- move the obfuscated plugin jar to the plugin dist lib folder -->
        <move todir="${assemble.stage.dir}/${ivy.artifact.id}/lib">
          <fileset dir="${assemble.stage.dir}/${ivy.artifact.id}/">
            <include name="${ivy.artifact.id}-${project.revision}-obf.jar" />
          </fileset>
          <globmapper from="*-obf.jar" to="*.jar"/>
        </move>
      </then>
      <else>
        <!-- move the plugin jar to the plugin dist lib folder -->
        <move todir="${assemble.stage.dir}/${ivy.artifact.id}/lib" overwrite="true">
          <fileset file="${assemble.stage.dir}/${ivy.artifact.id}/${ivy.artifact.id}-${project.revision}.jar"/>
        </move>
      </else>
    </if>
  </target>

  <target name="update-plugin-xml" depends="subfloor-pkg.assemble,install-antcontrib">
    <var name="libSection.var" value="" />
    <pathconvert property="jarFile" pathsep="${path.separator}">
      <map from="${approot.stage.dir}" to="" />
      <path>
        <fileset dir="${approot.stage.dir}" includes="**/*.jar" />
      </path>
    </pathconvert>
    <for param="jarIndividual" delimiter="${path.separator}" list="${jarFile}">
      <sequential>
        <!-- regex to remove leading slash if you see Error in the plugin.xml something went wrong here -->
        <propertyregex property="@{jarIndividual}" input="@{jarIndividual}" regexp="${file.separator}}?(.*)" select="\1" defaultvalue="Error" override="true" />
        <var name="libSection.var" value="${libSection.var}  &lt;library name=&quot;${@{jarIndividual}}&quot; /&gt;${line.separator}  " />
      </sequential>
    </for>
    <property name="libSection" value="${libSection.var}" />
    <replace file="${approot.stage.dir}/plugin.xml">
      <replacefilter token="@insert-libraries@" value="${libSection}" />
    </replace>
  </target>

  <!-- 
  The following overrides are in place to suppress IVY dependency management.  If you
  want to turn IVY off, you can uncomment these overrides. 
  -->

  <!-- Set default target to skip the ivy "resolve" step -->
  <!--target name="default" depends="clean-all,dist,package" /-->

  <!-- Set the clean-all target to skip the "clean-jars" step.  We do not want our build
  process to delete the "lib" dir -->
  <!--target name="clean-all" depends="clean"/-->

  <!-- begin remove for the customer src dist -->
  <target name="customer-src-codechanges.post">
    <delete>
      <fileset dir="${customer.stage.dir}">
        <include name="**/PluginLicenseVerifier.java" />
      </fileset>
    </delete>
    <copy todir="${customer.stage.dir}/libswt" flatten="false" overwrite="true">
      <fileset dir="libswt"/>
    </copy>
    <copy todir="${customer.stage.dir}/testfiles" flatten="false" overwrite="true">
      <fileset dir="testfiles"/>
    </copy>

  </target>
  <!-- end remove for the customer src dist -->
	
  <!-- Wadl2Java logic -->
  <target name="wadl2java-resolve" depends="install-antcontrib, install-ivy" description="Loads in the Wadl2Java dependencies so build-wadl2java.xml will work">
    <mkdir dir="${wadl2java.project}"/>
	  <ivy:resolve file="ivy.xml" conf="wadl2java" />
		<ivy:retrieve conf="wadl2java" pattern="${basedir}/wadl2java/lib/[module]-[revision](-[classifier]).[ext]" symlink="${ivy.use.symlinks.internal}" />
  </target>
  
	<property name="wadl2java.temp-file-full-path" value="${wadl2java.codedir}/${wadl2java.generated-class-name}.java" />
	
	<target name="wadl2java" description="Generated the classes reflecting the Rest Services from the Wadl file" depends="wadl2java-resolve" >
	  <taskdef name="wjc" 
           classname="org.jvnet.ws.wadl2java.WJCTask">
      <classpath>
          <fileset dir="${wadl2java.project}" includes="*.jar" 
                   excludes="wadl-cmdline*.jar"/>
      </classpath>
  	</taskdef>

    <echo message="Compiling the Wadl description..." />
    <mkdir dir="${wadl2java.codedir}"/>
    <wjc description="${wadl2java.source-wadl-file}" 
         package="${wadl2java.target-package}" 
         autoSchemaPackage="false" 
         target="${basedir}/src">
        
        <produces dir="${basedir}/src" includes="**/*.java" />
        <depends dir="." includes="build.xml"/>
    		<depends dir="${wadl2java.project}" includes="wadl2java.jar"/>
        <customClassName uri="http://localhost:9080/pentaho-di/plugin/" classname="PurRepositoryPluginServices" />            
    </wjc>
		
		<!-- Modify the resulting class adding our tagging interface -->
		<replaceregexp file="${wadl2java.temp-file-full-path}"
			match="package com.pentaho.di.services;\r\n"
			replace="package com.pentaho.di.services;${line.separator}${line.separator}import org.pentaho.di.repository.IRepositoryService;"
		/>

		<replaceregexp file="${wadl2java.temp-file-full-path}"
			match="public static class (.*) \{"
			replace="public static class \1 implements IRepositoryService {"
			byline="true"
		/>
		
		<replaceregexp file="${wadl2java.temp-file-full-path}"
			match="${wadl2java.generated-class-name}"
			replace="${wadl2java.desired-class-name}"
			byline="true"
		/>
		
		<!-- Finally rename the file and overwrite the original -->
		<move file="${wadl2java.temp-file-full-path}" tofile="${wadl2java.codedir}/${wadl2java.desired-class-name}.java" />

	</target>
	
</project>
